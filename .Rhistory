library('Inapp')
tree <- ape::read.tree(text = "(((a, b), (c, d)), e);")
tree$node.label <- c("n4", "n3", "n1", "n2")
plot(tree)
nodelabels(tree$node.label)
ape::nodelabels()
library('Inapp'); library('ape')
tree <- ape::read.tree(text = "(((a, b), (c, d)), e);")
tree$node.label <- c("n4", "n3", "n1", "n2")
plot(tree)
nodelabels(tree$node.label)
library(knitr)
tail <- c(0, 0, 0, 0, 1, 1, 1, 1)
col <- c(rep('-', 4), rep(1, 4))
bcol <- c(1,1, 2,2,2,2, 1,1)
blueTails <- matrix(c(tail, col, bcol), byrow=TRUE, ncol=length(tail))
colnames(blueTails) <- LETTERS[seq_along(tail)]
rownames(blueTails) <- c("Tail: (0), absent; (1), present",
"Tail colour: (-), inapplicable; (1), blue",
"Body colour: (1), black; (2), white")
kable(blueTails, capiton="Coding")
par(mfrow=c(3, 2), mar=c(2, 0.2, 0.2, 0.2))
tailTree <- ape::read.tree(text="((((A, B), C), D), (E, (F, (G, H))));")
bodyTree <- ape::read.tree(text="((((F, E), C), D), (A, (B, (G, H))));")
tail <- "00001111"
col <- "----1111"
bcol <- "11222211"
plot.states.matrix(apply.reconstruction(tailTree, tail, method='Fitch', match.tip.char=TRUE), 1:2, counts=1:2)
library(knitr); library('inapp')
par(mfrow=c(3, 2), mar=c(2, 0.2, 0.2, 0.2))
tailTree <- ape::read.tree(text="((((A, B), C), D), (E, (F, (G, H))));")
bodyTree <- ape::read.tree(text="((((F, E), C), D), (A, (B, (G, H))));")
tail <- "00001111"
col <- "----1111"
bcol <- "11222211"
plot(apply.reconstruction(tailTree, tail, method='Fitch', match.tip.char=TRUE), 1:2, counts=1:2)
par(mfrow=c(3, 2), mar=c(2, 0.2, 0.2, 0.2))
tailTree <- ape::read.tree(text="((((A, B), C), D), (E, (F, (G, H))));")
bodyTree <- ape::read.tree(text="((((F, E), C), D), (A, (B, (G, H))));")
tail <- "00001111"
col <- "----1111"
bcol <- "11222211"
plot(apply.reconstruction(tailTree, tail, method='Fitch', match.tip.char=TRUE), 1:2, counts=1:2)
library(knitr); library('Inapp')
tail <- c(0, 0, 0, 0, 1, 1, 1, 1)
col <- c(rep('-', 4), rep(1, 4))
bcol <- c(1,1, 2,2,2,2, 1,1)
blueTails <- matrix(c(tail, col, bcol), byrow=TRUE, ncol=length(tail))
colnames(blueTails) <- LETTERS[seq_along(tail)]
rownames(blueTails) <- c("Tail: (0), absent; (1), present",
"Tail colour: (-), inapplicable; (1), blue",
"Body colour: (1), black; (2), white")
kable(blueTails, capiton="Coding")
par(mfrow=c(3, 2), mar=c(2, 0.2, 0.2, 0.2))
tailTree <- ape::read.tree(text="((((A, B), C), D), (E, (F, (G, H))));")
bodyTree <- ape::read.tree(text="((((F, E), C), D), (A, (B, (G, H))));")
tail <- "00001111"
col <- "----1111"
bcol <- "11222211"
plot(apply.reconstruction(tailTree, tail, method='Fitch', match.tip.char=TRUE), 1:2, counts=1:2)
tailTree
tail
apply.reconstruction(tailTree, tail, method='Fitch', match.tip.char=TRUE)
tree=tailTree
tail->character
method='Fitch'
match.tip.char=TRUE
## Method
if(!(method %in% c("NA","Fitch"))) {
stop("method should be 'Fitch' or 'NA'")
}
## Set up the Inapplicable interpretation
if(method == "NA") {
inapplicable = NULL
} else {
if(missing(inapplicable)) {
## Treating as missing by default
inapplicable = 1
} else {
if(!(inapplicable %in% c(1,2))) {
stop("Inapplicable argument should be 1 (treated as ?) or 2 (treated as an extra state).")
}
}
}
## Setting up the output state matrix
states_matrix <- make.states.matrix(tree, character, inapplicable, match.tip.char)
## Method
if(!(method %in% c("NA","Fitch"))) {
stop("method should be 'Fitch' or 'NA'")
}
## Set up the Inapplicable interpretation
if(method == "NA") {
inapplicable = NULL
} else {
if(!(inapplicable %in% c(1,2))) {
stop("Inapplicable argument should be 1 (treated as ?) or 2 (treated as an extra state).")
}
}
inapplicable=1
method
## Setting up the output state matrix
states_matrix <- make.states.matrix(tree, character, inapplicable, match.tip.char)
## Setting the list of passes
if(method == "NA") {
n_passes <- list(first.downpass, first.uppass, second.downpass, second.uppass)
} else {
n_passes <- list(fitch.downpass, fitch.uppass)
}
## Applying the passes for each node
for (pass in 1:passes) {
states_matrix <- n_passes[[pass]](states_matrix)
}
## Applying the passes for each node
for (pass in n_passes) {
states_matrix <- pass(states_matrix)
}
## Setting the list of passes
if(method == "NA") {
passes <- list(first.downpass, first.uppass, second.downpass, second.uppass)
} else {
passes <- list(fitch.downpass, fitch.uppass)
}
## Applying the passes for each node
for (pass in passes) {
states_matrix <- pass(states_matrix)
}
## Get the total length of the tree
states_matrix$score <- length(states_matrix$changes) + length(states_matrix$regions)
par(mfrow=c(3, 2), mar=c(2, 0.2, 0.2, 0.2))
tailTree <- ape::read.tree(text="((((A, B), C), D), (E, (F, (G, H))));")
bodyTree <- ape::read.tree(text="((((F, E), C), D), (A, (B, (G, H))));")
tail <- "00001111"
col <- "----1111"
bcol <- "11222211"
plot(apply.reconstruction(tailTree, tail, method='Fitch', match.tip.char=TRUE), 1:2, counts=1:2)
plot(apply.reconstruction(tailTree, tail, method='Fitch', match.tip.char=TRUE), 1:2, counts=1:2)
load_all()
library(devtools)
install()
par(mfrow=c(3, 2), mar=c(2, 0.2, 0.2, 0.2))
tailTree <- ape::read.tree(text="((((A, B), C), D), (E, (F, (G, H))));")
bodyTree <- ape::read.tree(text="((((F, E), C), D), (A, (B, (G, H))));")
tail <- "00001111"
col <- "----1111"
bcol <- "11222211"
plot(apply.reconstruction(tailTree, tail, method='Fitch', match.tip.char=TRUE), 1:2, counts=1:2)
load_all()
install()
par(mfrow=c(3, 2), mar=c(2, 0.2, 0.2, 0.2))
tailTree <- ape::read.tree(text="((((A, B), C), D), (E, (F, (G, H))));")
bodyTree <- ape::read.tree(text="((((F, E), C), D), (A, (B, (G, H))));")
tail <- "00001111"
col <- "----1111"
bcol <- "11222211"
plot(apply.reconstruction(tailTree, tail, method='Fitch', match.tip.char=TRUE), 1:2, counts=1:2)
text(1, 1, "Tail presence")
plot(apply.reconstruction(bodyTree, tail, method='Fitch', match.tip.char=TRUE), 1:2, counts=1:2)
text(1, 1, "Tail presence")
plot(apply.reconstruction(tailTree, col, method='NA', match.tip.char=TRUE), 1:4, counts=1:2)
text(1, 1, "Tail colour")
plot.states.matrix(apply.reconstruction(bodyTree, col, method='NA', match.tip.char=TRUE), 1:4, counts=1:2)
text(1, 1, "Tail colour")
plot.states.matrix(apply.reconstruction(tailTree, bcol, method='Fitch', match.tip.char=TRUE), 1:2, counts=1:2)
text(1, 1, "Body colour")
plot.states.matrix(apply.reconstruction(bodyTree, bcol, method='Fitch', match.tip.char=TRUE), 1:2, counts=1:2)
text(1, 1, "Body colour")
library(Inapp)
?Inapp
library(Inapp)
vignettes('Inapp')
devtools::build_vignettes()
document()
build_vignettes()
build_vignettes()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
build_vignettes()
document()
document()
?rainbow
viritis
viridis
rainbow(length(unique(tips_labels)))
tips_labels=1:6
rainbow(length(unique(tips_labels)))
viridis(length(unique(tips_labels)))
viridis::viridis(length(unique(tips_labels)))
document()
document()
document()
check_man()
